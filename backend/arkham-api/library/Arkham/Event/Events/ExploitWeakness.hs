module Arkham.Event.Events.ExploitWeakness (exploitWeakness) where

import Arkham.Event.Cards qualified as Cards
import Arkham.Event.Import.Lifted
import Arkham.Helpers.SkillTest (getSkillTestTargetedEnemy, withSkillTest)
import Arkham.Matcher hiding (EnemyEvaded)
import Arkham.Modifier

newtype ExploitWeakness = ExploitWeakness EventAttrs
  deriving anyclass (IsEvent, HasModifiersFor, HasAbilities)
  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)

exploitWeakness :: EventCard ExploitWeakness
exploitWeakness = event ExploitWeakness Cards.exploitWeakness

instance RunMessage ExploitWeakness where
  runMessage msg e@(ExploitWeakness attrs) = runQueueT $ case msg of
    PlayThisEvent _iid (is attrs -> True) -> do
      getSkillTestTargetedEnemy >>= \case
        Just eid -> do
          withSkillTest \sid -> skillTestModifier sid attrs eid (AlternateSuccess (toTarget attrs))
          passSkillTest
        _ -> error "Wrong target type"
      pure e
    Successful (_, EnemyTarget eid) iid _ (isTarget attrs -> True) _ -> do
      elite <- eid <=~> EliteEnemy
      if elite
        then do
          automaticallyEvadeEnemy iid eid
          nonAttackEnemyDamage attrs 3 eid
        else toDiscardBy iid attrs eid
      pure e
    _ -> ExploitWeakness <$> liftRunMessage msg attrs
